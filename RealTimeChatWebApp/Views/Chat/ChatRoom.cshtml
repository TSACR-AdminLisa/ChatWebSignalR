@model RealTimeChatWebApp.Models.UserChatModel 

@{
    ViewBag.Title = "ChatRoom";
    Layout = "~/Views/Shared/_Layout.cshtml";

    //var viewDataUserInfo = Model; //asigna los valores del objeto UsersChatModel a una variable
}

<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">
    
    //auto-scroll to the end of the div (text area for the chat) automatically
    //$(document).ready(function(){
    //    $('#textChatContainer').stop().animate({
    //        scrollTop: $('#textChatContainer')[0].scrollHeight
    //    }, 1500);

    //auto-scroll to the end of the div (text area for the chat) manually
    function updateScroll(){
        var element = document.getElementById("textChatContainer");
        element.scrollTop = element.scrollHeight;
    }

    setInterval(updateScroll, 1500);


    $(function () {
        // Declare a proxy to reference the hub.
        var chat = $.connection.ChatHub;
        var userInfo = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        // Creates a function that the hub can call to broadcast messages.
        chat.client.receiveMessage = function (name, message) {
            // Html encode display name and message.
            var userDetail = "[" + getCurrentDate() + "] " + name;
            var encodedName = $('<div />').text(userDetail).html();
            var encodedMsg = $('<div />').text(message).html();
            // Add the message to the page.
            $('#chatDiscussion').append('<li><strong>' + encodedName
                + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
        };

        //Creates a function that the hub can call to broadcast when someone in the chat is typing
        chat.client.sayWhoIsTyping = function (name) {
            var encodedName = $('<div />').text(name).html();
            var encodedMsg = $('<div />').text(encodedName + ' está escribiendo ...').html();
            $('#textIsTyping').html('<em>' + encodedMsg + '</em>');
            setTimeout(function() {
                $('#textIsTyping').html('&nbsp;');
            }, 2000);
        };

        //Creates a function that the hub can call to broadcast when someone in the chat is typing
        chat.client.userIsDisconnected = function () {
            //var encodedName = $('<div />').text(name).html();
            var encodedMsg = $('<div />').text('El usuario se ha desconectado ...').html();
            $('#textIsDisconnected').html('<em>' + encodedMsg + '</em>');
        };

        // Set initial focus to message input box.
        $('#message').focus();
        // Start the connection.
        $.connection.hub.start().done(function () {
                try {
                    chat.server.InitConnect(userInfo); //initializes user connected
                    //chat.server.InitDisconnect(userInfo); //initializes user disconnected
                } catch (e) { alert(e.message); }

            $('#sendMessage').click(function () {
                // Call the Send method on the hub.
                chat.server.send($('#UserFullName').val(), $('#message').val(), $('#UserEmail').val(), $('#GroupNameChat').val());
                updateScroll();
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
            });

            $('#message').keypress(function (e) {
                if (e.which == 13) {
                    // Call the Send method on the hub.
                    chat.server.send($('#UserFullName').val(), $('#message').val(), $('#UserEmail').val(), $('#GroupNameChat').val());
                    updateScroll();
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                } else { //shows when someone is typing
                    chat.server.isTyping($('#UserFullName').val(), $('#GroupNameChat').val());
                }
            });

        });
    });

    function getCurrentDate() {
        var offset = -6
        var now = new Date();
        var hour = 60 * 60 * 1000;
        var min = 60 * 1000;

        var date = new Date(now.getTime() + (now.getTimezoneOffset() * min) + (offset * hour));
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ' ' + ampm;
        return strTime;
    }

</script>


<h2></h2>

<div id="chatContainer" style="border: 2px solid gray; border-radius: 15px; padding: 25px 25px 25px 25px; width: 85%; margin: 0 auto; margin-top: 35px;">
    <article id="textContainer" style="height: 350px; width: 100%; border: 2px solid gray;
                                       border-radius: 15px; padding: 25px 25px 25px 25px;">
        <article id="textChatContainer" style="height: 100%; width: 100%; overflow-y: auto; ">
            <ul id="chatDiscussion" style="display: block;"></ul>
        </article>
        <article id="textIsTyping" ></article>
        <article id="textIsDisconnected"></article>
    </article>
    <article style="margin-top: 10px; border: 2px solid gray; border-radius: 15px; padding: 25px 25px 25px 25px;">
        <table style="width: 100%;">
            <tr>
                <td style="width:74%;">
                    <input id="message" type="text" style="width: 100%; max-width: 100%;" />
                </td>
                <td style="width: 1%;"></td>
                <td style="width:25%;">
                    <input id="sendMessage" type="button" value="Enviar" class="btn btn-success" style="margin-left: 8px; width: 100%;" />
                </td>
            </tr>
        </table>
    </article>

</div>

@Html.HiddenFor(m => m._GroupNameChat, new { @id = "GroupNameChat" })
@Html.HiddenFor(m => m._UserEmail, new { @id = "UserEmail" })
@Html.HiddenFor(m => m._UserId, new { @id = "ConnectionId" })
@Html.HiddenFor(m => m._UserFullName, new { @id = "UserFullName" })
@Html.HiddenFor(m => m._UserPhone, new { @id = "UserPhone" })
@Html.HiddenFor(m => m._UserQuestion, new { @id = "Question" })
@Html.HiddenFor(m => m._UserType, new { @id = "UserType" })




